syntax = "proto3";


package proto;

import "google/protobuf/timestamp.proto";

option go_package="./pb/peer"; 


service PeerService {
  // Ping RPC to check if the peer is online and responsive.
  rpc Ping(PingRequest) returns (PingResponse);  
  // Check if a specific file exists on the peer
  rpc CheckFileExistence(CheckFileExistenceRequest) returns (CheckFileExistenceResponse);
  // Get the metadata for a filename.
  rpc GetFileMetadata(GetFileMetadataRequest) returns (GetFileMetadataResponse); 
  // Download File is used to download a file from another peer chunk by chunk. 
  rpc DownloadFile(DownloadFileRequest) returns (stream FileChunk);
  // UploadFile is used to by client to upload a file into peer. 
  rpc UploadFile(stream UploadFileChunk) returns (UploadFileResponse);
}

message PingRequest{
  // Optional: You could include a timestamp or a simple string message.
  string message=1;
}

message PingResponse{
  // Indicates the status of the ping, could be "OK" or some other status.
  string status = 1;

  // Optional: You could include the original message or timestamp for debugging
  string message = 2;

  // Optional: Server timestamp or some identifier to track the response time.
  google.protobuf.Timestamp timestamp = 3;
}

message CheckFileExistenceRequest{
  // The name of the file to check for existence
  string name=1;
}

message CheckFileExistenceResponse{
  bool exists=1;
  FileMetadata metadata=2; 
}

message FileMetadata {
  // The name of the file
  string name = 1; 
  // The size of the file in bytes      
  int64 size = 2; 
  // The checksum to validate integrity of the file.      
  string checksum = 3;  
}

message GetFileMetadataRequest{
  string name=1;
}

message GetFileMetadataResponse{
  FileMetadata metadata=1;
}

message DownloadFileRequest{
  // The name of the file to be downloaded
  string file_name=1;
}

message FileChunk{
  // The number of the chunk in the sequence
  int32 chunk_number = 1;    
  // The actual chunk data
  bytes data = 2;             
  // The total number of chunks for this file
  int32 total_chunks = 3;       
}

message UploadFileResponse{
  bool success=1;
  string message=2;
}

message UploadFileChunk{
  // The number of the chunk in the sequence
  int32 chunk_number = 1;    
  // The actual chunk data
  bytes data = 2;             
  // The total number of chunks for this file
  int32 total_chunks = 3;    
  // FileName is the name of the file
  string file_name=4;   
}